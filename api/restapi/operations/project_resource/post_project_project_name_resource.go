// Code generated by go-swagger; DO NOT EDIT.

package project_resource

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"

	models "github.com/keptn/keptn/api/models"
)

// PostProjectProjectNameResourceHandlerFunc turns a function with the right signature into a post project project name resource handler
type PostProjectProjectNameResourceHandlerFunc func(PostProjectProjectNameResourceParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn PostProjectProjectNameResourceHandlerFunc) Handle(params PostProjectProjectNameResourceParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// PostProjectProjectNameResourceHandler interface for that can handle valid post project project name resource params
type PostProjectProjectNameResourceHandler interface {
	Handle(PostProjectProjectNameResourceParams, *models.Principal) middleware.Responder
}

// NewPostProjectProjectNameResource creates a new http.Handler for the post project project name resource operation
func NewPostProjectProjectNameResource(ctx *middleware.Context, handler PostProjectProjectNameResourceHandler) *PostProjectProjectNameResource {
	return &PostProjectProjectNameResource{Context: ctx, Handler: handler}
}

/*PostProjectProjectNameResource swagger:route POST /project/{projectName}/resource Project Resource postProjectProjectNameResource

Upload a list of new resources for the project

*/
type PostProjectProjectNameResource struct {
	Context *middleware.Context
	Handler PostProjectProjectNameResourceHandler
}

func (o *PostProjectProjectNameResource) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostProjectProjectNameResourceParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostProjectProjectNameResourceBody post project project name resource body
// swagger:model PostProjectProjectNameResourceBody
type PostProjectProjectNameResourceBody struct {

	// resources
	Resources []*models.Resource `json:"resources"`
}

// Validate validates this post project project name resource body
func (o *PostProjectProjectNameResourceBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostProjectProjectNameResourceBody) validateResources(formats strfmt.Registry) error {

	if swag.IsZero(o.Resources) { // not required
		return nil
	}

	for i := 0; i < len(o.Resources); i++ {
		if swag.IsZero(o.Resources[i]) { // not required
			continue
		}

		if o.Resources[i] != nil {
			if err := o.Resources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + "resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostProjectProjectNameResourceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostProjectProjectNameResourceBody) UnmarshalBinary(b []byte) error {
	var res PostProjectProjectNameResourceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
